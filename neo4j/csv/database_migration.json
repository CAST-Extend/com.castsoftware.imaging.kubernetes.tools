[
    {
        "name": "Database Migration ",
        "id": 1202139,
        "category": "START",
        "rationales": {
            "Agnostic": "Migrating the database before moving to the cloud ensures compatibility, performance optimization, security, compliance adherence, cost optimization, high availability, disaster recovery, and seamless integration with cloud-native services. It enables organizations to fully leverage the benefits of cloud computing while maintaining data integrity and application functionality."
        },
        "remediations": {},
        "populations": {},
        "description": "",
        "impacts": [],
        "effort": null,
        "parents": [],
        "children": [
            1202140,
            1202144
        ]
    },
    {
        "name": "Oracle Database to PostgreSQL with Object Type Remediation",
        "id": 1202146,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to migrate your Oracle Database to PostgreSQL that will require object type remediation."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "Check if any violation of rules with TC 61045 and with tag AIP-M2C-DataType"
        },
        "description": "This rule checks all unsupported used Data types",
        "impacts": [
            "replatform"
        ],
        "effort": "moderate",
        "parents": [
            1202144
        ],
        "children": [
            1106006,
            1106008,
            1106010,
            1106012,
            1106014,
            1106036,
            1106040,
            1106042,
            1106044
        ]
    },
    {
        "name": "Oracle Database to PostgreSQL",
        "id": 1202144,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to migrate your Oracle Database to PostgreSQL including different remediation types."
        },
        "remediations": {},
        "populations": {},
        "description": "",
        "impacts": [],
        "effort": null,
        "parents": [
            1202139
        ],
        "children": [
            1202145,
            1202146,
            1202147
        ]
    },
    {
        "name": "DB2 Database to PostgreSQL with Object Type Remediation",
        "id": 1202142,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to Oracle Database migration PostgreSQL that will require object type remediation.\n\nTarget Database does not provide the support of the Object Type and sometimes does not provide a directly comparable alternative.  Automatic migration and conversion are not possible. However, other functions can be used as workarounds under certain conditions."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "TC 61045 + tag Objcet Type Remediation"
        },
        "description": "This rule checks all unsupported used objects types",
        "impacts": [
            "replatform",
            "review"
        ],
        "effort": "high",
        "parents": [
            1202140
        ],
        "children": [
            1106104
        ]
    },
    {
        "name": "Oracle Database to PostgreSQL with Data Type Remediation",
        "id": 1202145,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to migrate your Oracle Database to PostgreSQL that will require data type remediation."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "Check if any violation of rules with TC 61045 and with tag AIP-M2C-DataType"
        },
        "description": "This rule checks all unsupported used Data types",
        "impacts": [
            "replatform"
        ],
        "effort": "moderate",
        "parents": [
            1202144
        ],
        "children": [
            1106020
        ]
    },
    {
        "name": "DB2 Database to PostgreSQL with Data Type Remediation",
        "id": 1202141,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to Oracle Database migration PostgreSQL that will require data type remediation."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "Check if any violation of rules with TC 61045 and with tag AIP-M2C-DataType"
        },
        "description": "This rule checks all unsupported used Data types",
        "impacts": [
            "replatform"
        ],
        "effort": "moderate",
        "parents": [
            1202140
        ],
        "children": [
            1106052,
            1106054,
            1106058,
            1106064,
            1106066,
            1106068,
            1106070
        ]
    },
    {
        "name": "DB2 to PostgreSQL",
        "id": 1202140,
        "category": "BRANCHING-STEP",
        "rationales": {},
        "remediations": {},
        "populations": {},
        "description": "",
        "impacts": [],
        "effort": null,
        "parents": [
            1202139
        ],
        "children": [
            1202141,
            1202142,
            1202143
        ]
    },
    {
        "name": "DB2 Database to PostgreSQL with Syntax Remediation",
        "id": 1202143,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Used Syntax is not supported by the target Database service. Automatic migration and conversion are not possible. Manual conversion with dedicated equivalent syntax is required."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "TC 61045 + tag  Syntax Remediation"
        },
        "description": "This rule checks all unsupported Syntaxes",
        "impacts": [
            "replatform",
            "review"
        ],
        "effort": "low",
        "parents": [
            1202140
        ],
        "children": [
            1106072,
            1106074,
            1106076,
            1106078,
            1106080,
            1106082,
            1106084,
            1106088,
            1106090,
            1106092,
            1106094,
            1106096,
            1106100,
            1106102,
            1106106,
            1106108
        ]
    },
    {
        "name": "Oracle Database to PostgreSQL with Synatxe Remediation",
        "id": 1202147,
        "category": "BRANCHING-STEP",
        "rationales": {
            "Agnostic": "Recommendations to migrate your Oracle Database to PostgreSQL that will require syntax type remediation."
        },
        "remediations": {},
        "populations": {
            "Mainframe": "Check if any violation of rules with TC 61045 and with tag AIP-M2C-DataType"
        },
        "description": "This rule checks all unsupported used Data types",
        "impacts": [
            "replatform"
        ],
        "effort": "moderate",
        "parents": [
            1202144
        ],
        "children": [
            1106002,
            1106022,
            1106038
        ]
    },
    {
        "name": "Ensure LOB data types are not used",
        "id": 1106020,
        "category": "TASK",
        "rationales": {
            "Agnostic": "LOB storage is not supported by PostgreSQL."
        },
        "remediations": {
            "Agnostic": "Replace Oracle LOB data types with the following PostgreSQL data types:\n- BFILE can be replaced with VARCHAR(255) or CHARACTER VARYING(255)\n- BLOB can be replaced with BYTEA\n- CLOB and NCLOB can be replaced with TEXT"
        },
        "populations": null,
        "description": "This rule checks the usage of LOB Storage in Oracle Database(s) and the explicit conversion functions TO_CLOB and TO_NCLOB which convert other data types to LOB data types.",
        "impacts": [],
        "effort": null,
        "parents": [
            1202145
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 DECLARE variable is not used",
        "id": 1106102,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "Variable declarations statements used in DML files, stored procedures, functions and triggers should be converted before re-platforming your DB2 Database to PostgreSQL:\n\n1- Declarations are inside BEGIN END block   Should be before BEGIN END block\n2- DECLARE var datatype DEFAULT value        Should be replaced by var datatype DEFAULT value\n3- DECLARE var, var2, … datatype   Should be replaced by  var datatype; var2 datatype; …"
        },
        "populations": null,
        "description": "This rule checks the variable declaration in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL package DBMS_AUTO_INDEX is not used",
        "id": 1106014,
        "category": "TASK",
        "rationales": {
            "Agnostic": "Package DBMS_AUTO_INDEX is used to configure auto indexes and generate reports.\nPostgreSQL does not provide an Automatic Indexing feature.\n\nIn self-managed PostgreSQL instances, extensions like Dexter (https://github.com/ankane/dexter) and HypoPG (https://hypopg.readthedocs.io/en/latest/ ) can be utilized for generating indexes with limitations. Amazon Aurora PostgreSQL does not support these extensions."
        },
        "remediations": {
            "Agnostic": "Remove References to DBMS_AUTO_INDEX and replace with PostgreSQL Solution.\n\nPostgreSQL does not provide Automatic Indexing feature, but in self-managed PostgreSQL instances, extensions like Dexter (https://github.com/ankane/dexter) and HypoPG (https://hypopg.readthedocs.io/en/latest/ ) can\nbe utilized for generating indexes with limitations (Amazon Aurora PostgreSQL does not support these extensions).\nThe approach taken by these extensions are :\n- Identify the queries.\n- Update the table statistics if they haven’t been analyzed recently.\n- Get the initial cost of the queries and create hypothetical indexes on columns that aren’t already indexes.\n- Get costs again and see if any hypothetical indexes were used. Hypothetical indexes that were used and significantly reduced cost are selected to be indexes."
        },
        "populations": null,
        "description": "This rule checks the usage or DBMS_AUTO_INDEX package in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure BLOB data type is not used",
        "id": 1106052,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace BLOB(n) data type with BYTEA data type."
        },
        "populations": null,
        "description": "This rule checks if any BLOB data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL package UTL_FILE is not used",
        "id": 1106006,
        "category": "TASK",
        "rationales": {
            "Agnostic": "PostgreSQL doesn’t currently provide a directly comparable alternative for the Oracle UTL_FILE package."
        },
        "remediations": {
            "Agnostic": "PostgreSQL doesn’t currently provide a directly comparable alternative for the Oracle UTL_FILE package."
        },
        "populations": null,
        "description": "This rule checks the usage of the UTL_FILE package in the Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure Invisible Index is not used",
        "id": 1106042,
        "category": "TASK",
        "rationales": {
            "Agnostic": "PostgreSQL does not support Invisible Indexes"
        },
        "remediations": {
            "Agnostic": "Currently, PostgreSQL does not provide a directly comparable alternative for Oracle Invisible Indexes."
        },
        "populations": null,
        "description": "This rule checks if any Invisible Indexes exists in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function MONTH is not used",
        "id": 1106090,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Returns the month part of the date value. The output format is integer.\nReplace DATE_PART ('MONTH', <DATE_FIELD>) with MONTH (<DATE_FIELD>)."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function MONTH is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure DECLARE cursor is not used",
        "id": 1106100,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Cursor operations SQL statements used in stored procedures, functions and triggers from IBM DB2 to PostgreSQL should be Converted as follows: \n\n1-Cursor declaration: DECLARE cur CURSOR FOR query  To be Replaced by  cur CURSOR FOR query\n2-Return result set DECLARE cur CURSOR WITH RETURN  To be Replaced by cur REFCURSOR\n3-Dynamic cursors: DECLARE cur WITH RETURN FOR stmt PREPARE stmt FROM 'query_string'  To be Replaced by  OPEN cur FOR EXECUTE 'query_string'"
        },
        "populations": null,
        "description": "This rule checks Cursor operations 'DECLARE cur' Statements in SQL DB2 files and Embedded SQL Queries.",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL package DBMS_OUTPUT is not used",
        "id": 1106012,
        "category": "TASK",
        "rationales": {
            "Agnostic": "The Oracle DBMS_OUTPUT package is typically used for debugging or for displaying output messages from PL/SQL procedures.\n\nAmazon Aurora PostgreSQL doesn’t currently provides a directly comparable alternative for Oracle DBMS_OUTPUT package."
        },
        "remediations": {
            "Agnostic": "You can use the PostgreSQL RAISE statement as an alternative to DBMS_OUTPUT.\n\nHave a look to github \"orafce\" project, maybe you can find a better remediation."
        },
        "populations": null,
        "description": "This rule checks the usage of the DBMS_OUTPUT package in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure GRAPHIC data type is not used",
        "id": 1106066,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace GRAPHIC(n) data type with CHAR(n) data type"
        },
        "populations": null,
        "description": "This rule checks if any GRAPHIC data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Functions DECIMAL/DEC are not used",
        "id": 1106094,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "DECIMAL/DEC converts either character or numeric input to decimal. PostgreSQL has no direct equivalent, you should use TO_NUMBER instead."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Functions DECIMAL/DEC are used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function DATE is not used",
        "id": 1106072,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Converts the input to date value :\nDATE('2006-09-21') in DB2 to be changed to TO_DATE('21-02-2006','DD-MMYYYY') in PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function DATE is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure NCHAR VARYING data type is not used",
        "id": 1106064,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace NCHAR VARYING(n) data type with VARCHAR(n) data type"
        },
        "populations": null,
        "description": "This rule checks if any NCHAR VARYING data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function POSSTR is not used",
        "id": 1106078,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "POSSTR(<FIELD_1>, <FIELD_2>) in DB2 gets replaced by  POSITION(<FIELD_1> IN <FIELD_2>) in PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function POSSTR is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL package DBMS_SCHEDULER is not used",
        "id": 1106008,
        "category": "TASK",
        "rationales": {
            "Agnostic": "DBMS_SCHEDULER is not supported by Aurora PostgreSQL"
        },
        "remediations": {
            "Agnostic": "PostgreSQL doesn’t currently provide a directly comparable alternative for the Oracle DBMS_SCHEDULER package."
        },
        "populations": null,
        "description": "This rule checks the usage of the DBMS_SCHEDULER package in the Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL packages UTL_MAIL and UTL_SMTP are not used",
        "id": 1106044,
        "category": "TASK",
        "rationales": {
            "Agnostic": "The Oracle UTL_MAIL package provides functionality for sending email messages. Unlike UTL_SMTP, which is more complex and provided in earlier versions of Oracle, UTL_MAIL supports attachment."
        },
        "remediations": {
            "Agnostic": "The remediation is to remove all references to UTL_MAIL or UTL_SMTP and try to replace with a PostgreSQL solution."
        },
        "populations": null,
        "description": "This rule checks if the UTL_MAIL or UTL_SMTP PL/SQL packages are used in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function SMALLINT is not used",
        "id": 1106074,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "In DB2, SMALLINT converts either a number or a valid character value into a smallint value.SMALLINT(<Decimal Number>) in DB2 gets replaced by TO_NUMBER(<field>, <format>) in PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function SMALLINT is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure Unused Column is not used",
        "id": 1106038,
        "category": "TASK",
        "rationales": {
            "Agnostic": "PostgreSQL doesn’t support marking table columns as unused."
        },
        "remediations": {
            "Agnostic": "PostgreSQL doesn’t support marking table columns as unused. However, when running the ALTER TABLE… DROP COLUMN command, the drop column statement doesn’t physically remove the column; it only makes it invisible to SQL operations"
        },
        "populations": null,
        "description": "This rule checks if any Column table is set as Unused in the Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202147
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function CHAR is not used",
        "id": 1106084,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "CHAR in DB2 should be replaced by TO_CHAR( <timestamp / interval / int / double precision / numeric type>, text) in PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function CHAR is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure CLOB data type is not used",
        "id": 1106054,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace CLOB(n) data type with TEXT data type."
        },
        "populations": null,
        "description": "This rule checks the usage of CLOB Storage and the explicit conversion function TO_CLOB which convert other data types to CLOB.",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure MERGE statement is not used",
        "id": 1106002,
        "category": "TASK",
        "rationales": {
            "Agnostic": "MERGE statement is not supported and it cannot be automatically converted by AWS SCT. Manual conversion is straight-forward in most cases."
        },
        "remediations": {
            "Agnostic": "PostgreSQL does not support the usage of MERGE SQL statement. \nAs an alternative, consider using the INSERT… ON CONFLICT clause, which can handle cases where insert clauses might cause a conflict, and then redirect the operation as an update."
        },
        "populations": null,
        "description": "This rule checks if Oracle MERGE Statement is used.",
        "impacts": [],
        "effort": null,
        "parents": [
            1202147
        ],
        "children": []
    },
    {
        "name": "Ensure Database Links are not used",
        "id": 1106036,
        "category": "TASK",
        "rationales": {
            "Agnostic": "Migrating database links from Oracle to PostgreSQL requires a full rewrite the mechanism that managed the database links."
        },
        "remediations": {
            "Agnostic": "PostgreSQL Usage\nQuerying data in remote databases in PostgreSQL is available via two primary options:\n1. dblink database link function.\n2. postgresql_fdw (Foreign Data Wrapper, FDW) extension.\n\nThe Postgres foreign data wrapper extension is new to PostgreSQL and offers functionality that is similar to dblink. However, the Postgres foreign data wrapper aligns closer with the SQL standard and can provide improved performance."
        },
        "populations": null,
        "description": "This rule checks if database links objects exists or are referenced in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function TIMESTAMP is not used",
        "id": 1106082,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "TIMESTAMP(<FIELD>) Converts the input into a time value, and it has to be changed to TO_TIMESTAMP (<FIELD>, <format>) in PostgreSQL.\nCURRENT TIMESTAMP has to be changed to CURRENT_TIMESTAMP."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function TIMESTAMP is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure VALUES statement is not used",
        "id": 1106106,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "DB2 VALUES statement should be replaced in PostgresSQL with SELECT ... UNION ALL SELECT ..."
        },
        "populations": null,
        "description": "This rule checks the usage of the VALUES statement in the DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure FLOAT data type is not used",
        "id": 1106068,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "Replace FLOAT(p) data type with DOUBLE PRECISION data type."
        },
        "populations": null,
        "description": "This rule checks if any FLOAT data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function LCASE is not used",
        "id": 1106076,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "LOWER(<FIELD>) (or) LCASE(<FIELD>) is supported in DB2 where as only LOWER(<FIELD>) is supported in PostgreSQL. Thus, if LCASE(<FIELD>) is used in DB2, then it should be changed to LOWER(<FIELD>) for PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function LCASE is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function YEAR is not used",
        "id": 1106088,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Returns the year part of a date value. The output format is an integer.\nReplace YEAR (<DATE_FIELD>) with DATE_PART ('YEAR',<DATE_FIELD>)."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function YEAR is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure SYSIBM.SYSDUMMY1 table is not used",
        "id": 1106104,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "There is no “SYSIBM.SYSDUMMY1” table in PostgreSQL. PostgreSQL allows a “SELECT” without ”FROM” clause. You can remove this by using script."
        },
        "populations": null,
        "description": "This rule checks if SYSIBM.SYSDUMMY1 table is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202142
        ],
        "children": []
    },
    {
        "name": "Ensure DECFLOAT data type is not used",
        "id": 1106070,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace DECFLOAT(16|34) data type with FLOAT data type."
        },
        "populations": null,
        "description": "This rule checks if any DECFLOAT data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure PL/SQL package DBMS_RANDOM is not used",
        "id": 1106010,
        "category": "TASK",
        "rationales": {
            "Agnostic": "Oracle’s DBMS_RANDOM package provides functionality for generating random numbers or strings as part of an SQL statement or PL/SQL procedure. PostgreSQL does not provide a dedicated package equivalent to Oracle DBMS_RANDOM : Migration is not possible. However, other PostgreSQL functions can be used as workarounds under certain conditions."
        },
        "remediations": {
            "Agnostic": "PostgreSQL: Generating random numbers can be performed using the random() function. \nFor generating random strings, you can use the value returned from the random() function coupled with an md5() function."
        },
        "populations": null,
        "description": "This rule checks the usage of the DBMS_RANDOM package in the Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Function RAND is not used",
        "id": 1106080,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "RAND() in DB2 get replaced by RANDOM() in PostgreSQL and Returns a pseudorandom floating-point value in the range of zero to one inclusive."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Function RAND is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 SET variable is not used",
        "id": 1106108,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error."
        },
        "remediations": {
            "Agnostic": "Converting Variable setting statements used in stored procedures, functions and triggers from IBM DB2 to PostgreSQL as follows: \n\n1    SET v1 = value   To be replaced by   v1 := value\n2    SET v1 = value, v2 = value2, …   To be replaced by   v1 := value; v2 := value2; …\n3    SET (v1, v2, …) = (value, value2, …)   To be replaced by   v1 := value; v2 := value2; …\n4    SET (v1, v2, …) = (SELECT c1, c2, …)   To be replaced by   SELECT c1, c2, … INTO v1, v2, …"
        },
        "populations": null,
        "description": "This rule checks the variable assignment in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure PARTITION is not used in ALTER TABLE statements",
        "id": 1106096,
        "category": "TASK",
        "rationales": {
            "Agnostic": "AWS SCT can convert Db2 LUW tables to partitioned tables in PostgreSQL 10. There are several restrictions when converting a Db2 LUW partitioned table to PostgreSQL:\n\nYou can create a partitioned table with a nullable column in Db2 LUW, and you can specify a partition to store NULL values. However, PostgreSQL doesn’t support NULL values for RANGE partitioning.\n\nDb2 LUW can use an INCLUSIVE or EXCLUSIVE clause to set range boundary values. PostgreSQL only supports INCLUSIVE for a starting boundary and EXCLUSIVE for an ending boundary. The converted partition name is in the format <original_table_name>_<original_partition_name>.\n\nYou can create primary or unique keys for partitioned tables in Db2 LUW. PostgreSQL requires you to create primary or unique key for each partition directly. Primary or unique key constraints must be removed from the parent table. The converted key name is in the format <original_key_name>_<original_partition _name>.\n\nYou can create a foreign key constraint from and to a partitioned table in Db2 LUW. However, PostgreSQL doesn’t support foreign keys references in partitioned tables. PostgreSQL also doesn’t support foreign key references from a partitioned table to another table.\n\nYou can create an index on a partitioned table in Db2 LUW. However, PostgreSQL requires you to create an index for each partition directly. Indexes must be removed from the parent table. The converted index name is in the format <original_index_name>_<original_partition_name>.\n\nYou must define row triggers on individual partitions, not on the partitioned table. Triggers must be removed from the parent table. The converted trigger name is in the format <original_trigger_name>_<original_partition_name>."
        },
        "remediations": {
            "Agnostic": "The remediation is to remove unsupported options."
        },
        "populations": null,
        "description": "This rule will check if the following sql statements exist into DB2 SQL files:\n   ALTER TABLE ADD PARTITION\n   ALTER TABLE DETACH PARTITION\n   ALTER TABLE ATTACH PARTITION",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    },
    {
        "name": "Ensure you don't have unsupported option GENERATED BY DEFAULT for identity columns",
        "id": 1106022,
        "category": "TASK",
        "rationales": {
            "Agnostic": "Identity Columns with GENERATED BY DEFAULT option are not supported by PostgreSQL. But PostgreSQL suggests a specific way to create an autoincrementing column as equivalent feature"
        },
        "remediations": {
            "Agnostic": "PostgreSQL enables you to create a sequence that is similar to the IDENTITY property supported by Oracle 12c identity column feature. When creating a new table using the SERIAL pseudo-type, a sequence is created.\n\nAdditional types from the same family are SMALLSERIAL and BIGSERIAL.\nBy assigning a SERIAL type to a column as part of table creation, PostgreSQL creates a sequence using default configuration and adds the NOT NULL constraint to the column. The new sequence can be altered and configured as a regular sequence.\n\nSince PostgreSQL 10, there is a new option called identity columns which is similar to SERIAL data type but more SQL standard compliant. The identity columns are highly compatibility compare to Oracle identity columns."
        },
        "populations": null,
        "description": "This rule checks if tables with identity columns has GENERATED BY DEFAULT option in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202147
        ],
        "children": []
    },
    {
        "name": "Ensure READ ONLY Table is not used",
        "id": 1106040,
        "category": "TASK",
        "rationales": {
            "Agnostic": "READ ONLY mode for Table is not supported by PostgreSQL."
        },
        "remediations": {
            "Agnostic": "PostgreSQL does not provide an equivalent to the READ ONLY mode supported in Oracle.\nThe following alternatives could be used as workarounds:\nl “Read-only” User or Role.\nl “Read-only” database.\nl Creating a “read-only” database trigger or a using a “read-only” constraint."
        },
        "populations": null,
        "description": "This rule checks if any READ ONLY table exists in Oracle Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202146
        ],
        "children": []
    },
    {
        "name": "Ensure VARCHAR(n) FOR BIT DATA data type is not used",
        "id": 1106058,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "Replace VARCHAR(n) FOR BIT DATA data type with BYTEA data type."
        },
        "populations": null,
        "description": "This rule checks if any VARCHAR(n) FOR BIT DATA data type is used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202141
        ],
        "children": []
    },
    {
        "name": "Ensure DB2 Scalar Functions DAY/DAYS are not used",
        "id": 1106092,
        "category": "TASK",
        "rationales": {
            "Agnostic": "As you decide to migrate from DB2 to PostgreSQL, it is important to note the changes to be taken care of during the migration process. Without adaptation, the SQL script won’t compile on Postgresql, leading to error"
        },
        "remediations": {
            "Agnostic": "DAY returns the day (as in day of the month) part of a date (or equivalent) value. The output format is integer.\nDAY (<DATE_FIELD>) should be replaced with : DATE_PART(‘day’, <DATE_FIELD>).\n\nDAYS converts a date (or equivalent) value into a number that represents the number of days since the date \"0001-01-01\" inclusive. The output format is integer.\nDAYS is not available in PostgreSQL."
        },
        "populations": null,
        "description": "This rule checks the DB2 Scalar Functions DAY/DAYS are used in DB2 Database(s).",
        "impacts": [],
        "effort": null,
        "parents": [
            1202143
        ],
        "children": []
    }
]